//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i32,
  pub name: String,
  pub email: Option<String>,
  pub default_work_setting_id: Option<i32>,
  pub last_login_time: Option<DateTime>,
  pub created_at: DateTime,
  pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::documents::Entity")]
  Documents,
  #[sea_orm(has_many = "super::todo_categories::Entity")]
  TodoCategories,
  #[sea_orm(has_many = "super::todo_items::Entity")]
  TodoItems,
  #[sea_orm(has_many = "super::work_settings::Entity")]
  WorkSettings,
  #[sea_orm(has_many = "super::work_times::Entity")]
  WorkTimes,
}

impl Related<super::documents::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Documents.def()
  }
}

impl Related<super::todo_categories::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::TodoCategories.def()
  }
}

impl Related<super::todo_items::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::TodoItems.def()
  }
}

impl Related<super::work_settings::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::WorkSettings.def()
  }
}

impl Related<super::work_times::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::WorkTimes.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
